" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Vim will load $VIMRUNTIME/defaults.vim if the user does not have a vimrc.
" This happens after /etc/vim/vimrc(.local) are loaded, so it will override
" any settings in these files.
" If you don't want that to happen, uncomment the below line to prevent
" defaults.vim from being loaded.
 let g:skip_defaults_vim = 1

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

"set some font info
"set guifont=Iosevka_Nerd_Font:h11
"set guifont=DroidSansMono\ Nerd\ Font:h11
set guifont=Hack:11

set encoding=UTF-8

let g:airline_powerline_fonts = 1
let g:webdevicons_enable = 1
let g:webdevicons_enable_nerdtree = 1
let g:webdevicons_enable_airline_tabline = 1
let g:webdevicons_enable_airline_statusline = 1
let g:webdevicons_enable_ctrlp = 1
let g:webdevicons_enable_startify = 1

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
if has("autocmd")
  filetype plugin indent on
endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
set ignorecase		" Do case insensitive matching
set smartcase		" Do smart case matching
set incsearch		" Incremental search
set autowrite		" Automatically save before commands like :next and :make
set hidden		" Hide buffers when they are abandoned
set mouse=a		" Enable mouse usage (all modes)
set number 		" Row numbering
set cursorline          " highlight current line
set completeopt=menuone    " show completion menu also for single hits

runtime! ftplugin/man.vim

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

"colorscheme zenburn
"colorscheme nord

let g:zenburn_old_Visual = 1   " marked lines are lightened

"cursormode
if filereadable("$HOME/.config/.cursormode")
   source $HOME/.config/cursormode
endif

" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Make sure you use single quotes

Plug 'arcticicestudio/nord-vim'

" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
Plug 'junegunn/vim-easy-align'

" Any valid git URL is allowed
Plug 'https://github.com/junegunn/vim-github-dashboard.git'

" Multiple Plug commands can be written in a single line using | separators
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

" On-demand loading
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }

" Using a non-default branch
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }

" Using a tagged release; wildcard allowed (requires git 1.9.2 or above)
Plug 'fatih/vim-go', { 'tag': '*' }

" Plugin options
Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }

" Plugin outside ~/.vim/plugged with post-update hook
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

" Unmanaged plugin (manually installed and updated)
Plug '~/my-prototype-plugin'

" Multiple file types
Plug 'kovisoft/paredit', { 'for': ['clojure', 'scheme'] }

" On-demand loading on both conditions
Plug 'junegunn/vader.vim',  { 'on': 'Vader', 'for': 'vader' }

" Code to execute when the plugin is lazily loaded on demand
Plug 'junegunn/goyo.vim', { 'for': 'markdown' }
autocmd! User goyo.vim echom 'Goyo is now loaded!'

Plug 'junegunn/goyo.vim'

" Fetch https://github.com/vim-airline/vim-airline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

"enable smart tabline and formatter
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'default'

"Vimagit
Plug 'jreybert/vimagit'

if has('nvim') || has('patch-8.0.902')
  Plug 'mhinz/vim-signify'
else
  Plug 'mhinz/vim-signify', { 'branch': 'legacy' }
endif

"Startify
Plug 'mhinz/vim-startify'

"Tim Pope Plugins
Plug 'tpope/vim-fugitive'

Plug 'tpope/vim-surround'

Plug 'tpope/vim-rails'

Plug 'tpope/vim-bundler'

Plug 'tpope/vim-rails'

Plug 'tpope/vim-commentary'

Plug 'tpope/vim-heroku'

"Create Gists
Plug 'mattn/vim-gist'

"Php Completion
Plug 'lvht/phpcd.vim', { 'for': 'php', 'do': 'composer install' }

"Deoplete Code Completion
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim', { 'on': 'DeopleteToggle' }
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
let g:deoplete#enable_at_startup = 1

"eSearch
Plug   'eugen0329/vim-esearch'

"markdown preview
Plug 'shime/vim-livedown'

"Python
Plug 'python-mode/python-mode'

"Tag List
Plug 'yegappan/taglist'

"Commenting
Plug 'preservim/nerdcommenter'

"code-completion engine for Vim
Plug 'ycm-core/YouCompleteMe'

"define command-line abbreviations that only expand at the beginning of the command-line prompt by a command :Alias
Plug 'Konfekt/vim-alias'

"Minisnip Fork
Plug 'joereynolds/vim-minisnip'

"Wakatime
Plug 'wakatime/vim-wakatime'

"Devicons
Plug 'ryanoasis/vim-devicons'

" Initialize plugin system, always keep this at the bottom of plugs
call plug#end()

" Mapping Extras

nnoremap <silent> <F2> :TlistToggle<CR>

" mapping to make movements operate on 1 screen line in wrap mode
" <http://stackoverflow.com/questions/4946421/vim-moving-with-hjkl-in-long-lines-screen-lines>
function! ScreenMovement(movement)
    if &wrap
        return "g" . a:movement
    else
        return a:movement
    endif
endfunction

map <silent> <expr> <C-Down> ScreenMovement("j")
map <silent> <expr> <C-Up> ScreenMovement("k")
map <silent> <expr> <C-Home> ScreenMovement("0")
map <silent> <expr> <C-End> ScreenMovement("$")
map ZX :cq " quit and return error (helpful when using Vim with Git)
map ZA :qa " quit all buffers
map ZS :xa " quit and save all buffers 

" Persistent undo - new function in Vim 7.3.
" Create the directory manually.
set undodir=~/.vim/undodir
set undofile

set backup     " use backup files
set backupdir=~/.vim/backups    " collect backup files
set clipboard=unnamedplus

"stuff to fix vim when using xrvt
"nnoremap <silent> <A-h> <C-w><
"nnoremap <silent> <A-k> <C-w>-
"nnoremap <silent> <A-j> <C-w>+
"nnoremap <silent> <A-l> <C-w>>

"function! Altmap (char)
 "   if has('gui_running') | return ' <A-'.a:char.'> ' | else | return ' <Esc>'.a:char.' '|endif
"endfunction

"if $TERM == 'rxvt-unicode-256color'&&!has('gui_running')
 "  set ttimeoutlen=10
  "augroup FastEscape
   "   autocmd!
    "  autocmd InsertEnter * set timeoutlen=400
     " autocmd InsertLeave * set timeoutlen=2000
    "augroup END
    "execute 'nnoremap <silent>'.Altmap('h').'<C-w><'
    "execute 'nnoremap <silent>'.Altmap('k').'<C-w>-'
    "execute 'nnoremap <silent>'.Altmap('j').'<C-w>+'
   " execute 'nnoremap <silent>'.Altmap('l').'<C-w>>'
"endif

